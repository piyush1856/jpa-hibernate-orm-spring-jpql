@Entity
public class Employee {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int empId;
	private String name;
	private int salary;
	
	@ManyToOne(cascade = CascadeType.ALL)
	private Department dept;
	
	
	
	public Department getDept() {
		return dept;
	}

	public void setDept(Department dept) {
		this.dept = dept;
	}

	public Employee(int empId, String name, int salary) {
		super();
		this.empId = empId;
		this.name = name;
		this.salary = salary;
	}

	public Employee(String name, int salary) {
		super();
		this.name = name;
		this.salary = salary;
	}

	public int getEmpId() {
		return empId;
	}

	public void setEmpId(int empId) {
		this.empId = empId;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", name=" + name + ", salary=" + salary + ", dept=" + dept + "]";
	}

	public Employee() {
		super();
	}

}



@Entity
public class Department {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int deptId;
	private String dname;
	private String location;
	
	@OneToMany(cascade = CascadeType.ALL)
	private List<Employee> emps = new ArrayList<>();
	
	
	public List<Employee> getEmps() {
		return emps;
	}

	public void setEmps(List<Employee> emps) {
		this.emps = emps;
	}

	public Department(String dname, String location) {
		super();
		this.dname = dname;
		this.location = location;
	
	}

	public Department() {
		super();
	}

	public Department(int deptId, String dname, String location) {
		super();
		this.deptId = deptId;
		this.dname = dname;
		this.location = location;
		
	}

	public int getDeptId() {
		return deptId;
	}

	public void setDeptId(int deptId) {
		this.deptId = deptId;
	}

	public String getDname() {
		return dname;
	}

	public void setDname(String dname) {
		this.dname = dname;
	}

	public String getLocation() {
		return location;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	

	@Override
	public String toString() {
		return "Department [deptId=" + deptId + ", dname=" + dname + ", location=" + location + ", emps=" + emps + "]";
	}	
	
}





public class Demo {
	
	
	public static void main(String[] args) {
		
		EntityManager em=EMUtil.provideEntityManager();
		
//		***while persisting the objs we need to associate both objs with each ohter. otherwise we will not get the desired result.
//		(relationship may not be established)
		
		
		Department dept=new Department();
		dept.setDname("Marketing");
		dept.setLocation("Kolkata");
		
		Employee emp1=new Employee();
		emp1.setName("Sunil");
		emp1.setSalary(7800);
		emp1.setDept(dept); //associating dept with emp1
		
		Employee emp2=new Employee();
		emp2.setName("Suresh");
		emp2.setSalary(8800);
		emp2.setDept(dept); //associating dept with emp1
		
		//here both emp got the dept details..
		
		//now we need to give both emp details to the dept
		
		//associating both emp with the dept
		dept.getEmps().add(emp1);
		dept.getEmps().add(emp2);
		
		
		em.getTransaction().begin();
		
		em.persist(dept);
		
		em.getTransaction().commit();	
			
		System.out.println("done...");
		
	}
	

//--here one 3rd table will be created, by using this Dept Entity will get the details of Emp Entity.
//and one FK column will be generated inside the emp table by using this Emp Entity get the details of Dept.
//
//
//--in order to tell the ORM s/w while navigating from Dept to Emp,don't use the 3rd linking table , relationship is 
//already maintained inside the employee table , so instead of using 3rd table use the employee table reff we use "mappedBy" property inside the @OneToMany 
//annotation with the value:- the variable defined in another side.

}


================================================================================================================================================================================
================================================================================================================================================================================


Mapped By : ignore third linking table 
			can only be used by bidirectional

@Entity
public class Department {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int deptId;
	private String dname;
	private String location;
	
	@OneToMany(cascade = CascadeType.ALL,mappedBy = "dept") //dept is taken from employee class
	private List<Employee> emps = new ArrayList<>();
	
	
	public List<Employee> getEmps() {
		return emps;
	}

	public void setEmps(List<Employee> emps) {
		this.emps = emps;
	}

	public Department(String dname, String location) {
		super();
		this.dname = dname;
		this.location = location;
	
	}

	public Department() {
		super();
	}

	public Department(int deptId, String dname, String location) {
		super();
		this.deptId = deptId;
		this.dname = dname;
		this.location = location;
		
	}

	public int getDeptId() {
		return deptId;
	}

	public void setDeptId(int deptId) {
		this.deptId = deptId;
	}

	public String getDname() {
		return dname;
	}

	public void setDname(String dname) {
		this.dname = dname;
	}

	public String getLocation() {
		return location;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	

	@Override
	public String toString() {
		return "Department [deptId=" + deptId + ", dname=" + dname + ", location=" + location + ", emps=" + emps + "]";
	}	
	
}

=========================================================================================================================================================
=========================================================================================================================================================
 Application / Fetching : 
 
 public class Demo {
	
	
	public static void main(String[] args) {
		
		EntityManager em=EMUtil.provideEntityManager();
		
		
		//Listing out all the employee of a particular department
		
		Department d= em.find(Department.class, 1);
		
		List<Employee> emps= d.getEmps();
		
		emps.forEach(e ->{
			
			System.out.println(e.getEmpId());
			System.out.println(e.getName());
			System.out.println(e.getSalary());
			
		});
		
		System.out.println("done...");	
	}
}
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 





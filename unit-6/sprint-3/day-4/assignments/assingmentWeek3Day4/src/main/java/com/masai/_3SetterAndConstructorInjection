
There are many key differences between constructor injection and setter injection.

Partial dependency: can be injected using setter injection but it is not possible by constructor. 
					Suppose there are 3 properties in a class, having 3 arg constructor and setters 
					methods. In such case, if you want to pass information for only one property, 
					it is possible by setter method only.
					
Overriding: Setter injection overrides the constructor injection. If we use both constructor and 
			setter injection, IOC container will use the setter injection.
			
Changes: We can easily change the value by setter injection. It doesn't create a new bean instance 	
		 always like constructor. So setter injection is flexible than constructor injection.
		 
		 
		 
		 
		 
		 
		 
		 
1. Setter injection: Here container will call the setter method to inject the dependency to
					the dependent.

					Here we use <property> tag inside the <bean> tag.
						
					The attribute of this <property> tag are:
						1. name: Name of the property (dependency)
						2. value
						3. ref

					If the dependency is the simple value then we use "value" whereas if the dependency
					is object type then we use "ref".

					We can't use value and ref at the same time.
					In case of ref:- we need to pass other registered spring bean id.
					
					
					
					
2. Constructor injection: Here container will call the parameterized constructor
							defined in our class to inject the dependency to the dependent.

						For this we use <constructor-arg> tag inside the <bean> tag.
						
						For each dependency, we need to take a separate <constructor-arg> tag.					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
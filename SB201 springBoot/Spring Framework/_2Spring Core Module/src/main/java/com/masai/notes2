Life Cycle and Garbage collector :
====================================

public class Demo {
	
	public Demo() {
		System.out.println("Object created");
	}
	
	@Override
	protected void finalize() throws Throwable {
		
		System.out.println("Object dies ...");
	}
	public static void main(String[] args) {
		
		Demo d1 = new Demo();
		d1=null; 	//eligible for garbage collector but might get killed late
		
		System.gc(); // invoke GC and kill all eligible right now
		//forcefully initiate the garbage collector	
	}
}


Note: for normal java class /java bean Jvm will manage the life-cycle through
constructor and finalize() method.

where as for a Spring Bean life-cycle will be managed by the Spring container.


==============================================================================================================================


Initialization : (init-method)
--------------------------------
if you want any method to initialize before the bean is ready :

<bean id="aid" class = "com.masai.intialiazingAndDisposing.A" init-method="mySetup">
		
		<property name="age" value="25"></property>
		<property name="name" value="Ramesh"></property>
	
</bean>


Disposing a bean :
--------------------

<bean id="aid" class = "com.masai.intialiazingAndDisposing.A" init-method="mySetup" destroy-method="myDestroy">
		
		<property name="age" value="25"></property>
		<property name="name" value="Ramesh"></property>
	
</bean>

sample class : 
public class A {
	
	int age;
	String name;
	
	public A() {
		System.out.println("Inside constructor A");
		
		System.out.println("Inside constructor age is : " + age);
	}
	
	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void showA() {

		System.out.println("Inside showA of A");
		
	}
	public void mySetup() {
		//Connection creation logic
		//initialization logic
		
		System.out.println("Inside mySetup method of A");
		
		System.out.println("Inside mySetup age is : " + age);
	}
	
	public void myDestroy() {
		System.out.println("Inside myDestroy");
	}
	
}




public class Main {
	
	public static void main(String[] args) {
		
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		A a = ctx.getBean("aid",A.class);
		a.showA();
		
		ClassPathXmlApplicationContext ctx2 = (ClassPathXmlApplicationContext) ctx;
		
		ctx2.close(); // to close the container
		//call method by down casting the interface to class
			
		
	}

}



====================================================================================================================
====================================================================================================================
Lazy and eager initialization of a Bean:
-------------------------------------------

ApplicationContext container by default performs early initialization, it means container
creates the object of Spring bean when spring configuration xml will be loaded into the
memory.

If we want to tell ApplicationContext container that lazy initialize a bean (create the
bean class
object and resolve its dependencies and call the init-method at time of pulling/
accessing the bean object ) then we need to use "lazy-init" attribute to the <bean> tag
with value "true".

<bean id="aid" class = "com.masai.intialiazingAndDisposing.A" init-method="mySetup" destroy-method="myDestroy" lazy-init="true">
		
		<property name="age" value="25"></property>
		<property name="name" value="Ramesh"></property>
	
</bean>

====================================================================================================================
====================================================================================================================

Bean Scope :
-------------

Spring f/w defines 4 scopes for a bean:
1. singleton scope (it is a default scope of spring bean)
2. prototype scope
3. request scope
4. session scope

Note: request and session scopes are used only in the web-app (spring -mvc
module)


Singleton scope : 
--------------------
it returns same bean class object for all the getBean() method call with
the same bean id. i.e whenever we are pulling an object with the same id multiple time
,container will return same object.

Example:
A obj1 = ctx.getBean("a1",A.class);
A obj2 = ctx.getBean("a1",A.class);
System.out.println(obj1 == obj2); //true

Note: If the same bean class is configured with different id then container creates one
more object for that bean, it means container makes a spring bean object as a singleton
with respect to the id.



Note: According to the Singleton design pattern for a java class we are allowed to create only one object per jvm.


Prototype scope:
-------------------
It returns a separate bean class object for every getBean() method call even with the
same id also.
In order to tell the container to put a bean object in a prototype scope we need to mention
by
using "scope" attribute of the <bean> tag.

Example:

<bean id="a1" class="com.masai.A" scope="prototype">
	<property name="message" value="Welcome to Spring.."/>
</bean>


ApplicationContext ctx= new ClassPathXmlApplicationContext("applicationContext.xml");
A obj1 = ctx.getBean("a1",A.class);
A obj2 = ctx.getBean("a1",A.class);
System.out.println(obj1 == obj2); //false


====================================================================================================================
====================================================================================================================

Bean Life Cycle :
------------------


For ordinary java class constructor and finalize() methods can be considered as life cycle
methods. These methods will be called automatically by the JVM,
Spring container will control the life-cycle of a spring bean, i.e. from instantiation to
destruction.

Spring bean class is POJO class, it need not implements any spring f/w API specific
interface or extend any class to facilitate the spring container to control the life cycle of
a spring bean. i.e. for spring beans, component contract is not required.

Life-cycle of a spring bean has 5 stages:
1. Does not exist
2. Instantiated
3. Initialized
4. Service
5. Destroy

1. Does not exist phase:
---------------------------
Initially a spring bean object does not exist, if the bean object is in singleton scope
then bean is instantiated by container at the time of loading the xml file.
If the scope is prototype then it is instantiated at the time of pulling the object/utilizing
that object. (i.e. at the time of calling the getBean() method)

2. Instantiation phase:
-------------------------
Spring container loads the spring bean class into the memory and creates the bean
class object.
after that then bean class object is created, spring container uses DI to populate the
bean fields (properties/variables)
All the dependencies will be resolved for a spring bean before its instantiation is
finished.

3. Initialization phase:
----------------------------
If inside the spring bean class any user-defined init-method is configured , spring
container will call that method.

Note:- unless initialization phase is over , spring container does not gives bean
reference to the caller.

4. Service phase / Ready to use phase:
----------------------------------------
Here spring container provides the bean object reference to the caller, then caller can
call its business method on that bean object.

5. Destruction phase:
------------------------
Upon the container shutdown (when we call close() method on the container class )
spring container will call user-defined destroy() method if it is configured, just before
bean instance is garbage collected.

Note:- when we shutdown the container, all the associated bean obj will be eligible
for the garbage collection.


===========================================================================================================================
===========================================================================================================================

Injecting Collection type Dependencies:
---------------------------------------
example 1:

	<bean id="aid" class = "com.masai.injectingCollection.A" >
		
		<property name="names">
		
			<list>
			
				<value>Delhi</value>
				<value>Chennai</value>
				<value>Kolkata</value>
				<value>Mumbai</value>

			</list>
		
		</property>
	
	</bean>
	


example 2:	


<?xml version="1.0" encoding="UTF-8"?>


<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

	
	<bean id="s1" class="com.masai.injectingCollection.Student">
		<constructor-arg name="roll" value="100" />
		<constructor-arg name="name" value="Ram" />
		<constructor-arg name="marks" value="780" />
	</bean>
	
	<bean id="s2" class="com.masai.injectingCollection.Student">
		<constructor-arg name="roll" value="101" />
		<constructor-arg name="name" value="Ramesh" />
		<constructor-arg name="marks" value="680" />
	</bean>
	
	<bean id="s3" class="com.masai.injectingCollection.Student">
		<constructor-arg name="roll" value="102" />
		<constructor-arg name="name" value="Sunil" />
		<constructor-arg name="marks" value="880" />
	</bean>

	
	<bean id="cl1" class="com.masai.injectingCollection.Collage">
	
		<constructor-arg name="collageName" value="NIT"/>
		
		<property name="students">
			<list>
				<ref bean="s1" />
				<ref bean="s2" />
				<ref bean="s3" />
			</list>
		</property>
			
	</bean>
	
</beans>




public class Student {
	
	private int roll;
	private String name;
	private int marks;
	
	
	//constructor injection point
	public Student(int roll, String name, int marks) {
		super();
		this.roll = roll;
		this.name = name;
		this.marks = marks;
	}

	
	public void displayDetails() {
		System.out.println("Roll is :"+roll);
		System.out.println("Name is :"+name);
		System.out.println("Marks is :"+marks);
	}

}


public class Collage {
	
	//simple type
	private String collageName;
	//collection type
	private List<Student> students;
	
	public String getCollageName() {
		return collageName;
	}
	
	//constructor injection point for collageName
	public Collage(String collageName) {
		this.collageName = collageName;
	}
	
	//setter injection point for List
	public void setStudents(List<Student> students) {
		this.students = students;
	}
	
	public List<Student> getStudents() {
		return students;
	}

}


public class Demo {
	
	public static void main(String[] args) {
		
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
//		A a1 = ctx.getBean("aid",A.class);
//		a1.show();
		
		
		Collage collage = ctx.getBean("cl1",Collage.class);
		
		List<Student> students= collage.getStudents();
		
		System.out.println("Collage name is "+collage.getCollageName());
		System.out.println("-----------------------------");
		
		students.forEach(student -> {
			student.displayDetails();
			System.out.println("==================");
		});
		
		
	}

}


	for map : 
	---------
	
	<bean id="s1" class="com.masai.Student">
<constructor-arg name="roll" value="100"/>
<constructor-arg name="name" value="Raj"/>
<constructor-arg name="marks" value="700"/>
</bean>
<bean id="s2" class="com.masai.Student">
<constructor-arg name="roll" value="102"/>
<constructor-arg name="name" value="Simran"/>
<constructor-arg name="marks" value="720"/>
</bean>
<bean id="s3" class="com.masai.Student">
<constructor-arg name="roll" value="104"/>
<constructor-arg name="name" value="Rajesh"/>
<constructor-arg name="marks" value="750"/>
</bean>
<bean id="aid" class="com.masai.A">
<property name="theMap">
<map>
<entry key-ref="s1" value="NIT"/>
<entry key-ref="s2" value="GIET"/>
<entry key-ref="s3" value="AMITY"/>
</map>
</property>
</bean>
	
	
	
	

















































